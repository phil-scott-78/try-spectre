@page "/"
@using XtermBlazor
@using Spectre.Console
@using Spectre.Console.Rendering
@using System.Collections.Concurrent
@using System.Reflection

<Xterm @ref="_terminal" Options="_options" OnKey="OnKey"/>

<button @onclick="DoIt">Do It</button>

@code {
    private Xterm _terminal = null!;
    private readonly ConcurrentQueue<ConsoleKeyInfo> _keyQueue = new();

    private readonly TerminalOptions _options = new TerminalOptions
    {
        CursorBlink = true,
        CursorStyle = CursorStyle.Bar,
        DisableStdin = false,
        LogLevel = LogLevel.Debug,
        ConvertEOL = true,
        FontFamily = "'Cascadia Code'",
        FontWeight = "200",
        FontSize = 16,
        Columns = 120,
        Rows = 45,
        Theme = new Theme()
        {
            Background = "#282C34",
            Foreground = "#DCDFE4",
            Cursor = "#FFFFFF",
            Black = "#282C34",
            Blue = "#61AFEF",
            Cyan = "#56B6C2",
            Green = "#98C379",
            Magenta = "#C678DD",
            Red = "#E06C75",
            White = "#DCDFE4",
            Yellow = "#E5C07B",
            BrightBlack = "#282C34",
            BrightBlue = "#61AFEF",
            BrightCyan = "#56B6C2",
            BrightGreen = "#98C379",
            BrightMagenta = "#C678DD",
            BrightRed = "#E06C75",
            BrightWhite = "#DCDFE4",
            BrightYellow = "#E5C07B"
        }
    };

    private Task OnKey(KeyboardEventArgs args)
    {
        _keyQueue.Enqueue(new ConsoleKeyInfo(args.Key[0], ConsoleKey.A, args.ShiftKey, args.AltKey, args.CtrlKey));
        return Task.CompletedTask;
    }

    private Task DoIt()
    {
        var factory = new AnsiConsoleFactory();
        var ansiConsole = factory.Create(new AnsiConsoleSettings()
        {
            Ansi = AnsiSupport.Yes,
            ColorSystem = ColorSystemSupport.TrueColor,
            Out = new AnsiConsoleOutput(new XtermTextWriter(_terminal)),
    // be cool if there was an In property here....
            Interactive = InteractionSupport.Yes,
            ExclusivityMode = new NoopExclusivityMode(),
        });
        ansiConsole.Profile.Height = 120;
        ansiConsole.Profile.Width = 80;

    // var facadeType = typeof(IAnsiConsole).Assembly.GetType("Spectre.Console.AnsiConsoleFacade");
    // var field = facadeType?.GetField("<Input>k__BackingField", BindingFlags.Instance | BindingFlags.NonPublic);
    // field?.SetValue(ansiConsole, new XTermAnsiInput(_keyQueue));

        WriteShowcase(ansiConsole);
        return Task.CompletedTask;
    }

    private static void WriteShowcase(IAnsiConsole ansiConsole)
    {
        var table = new Table().HideHeaders().NoBorder();
        table.Title("[u][yellow]Spectre.Console[/] [b]Features[/][/]");
        table.AddColumn("Feature", c => c.NoWrap().RightAligned().Width(10).PadRight(3));
        table.AddColumn("Demonstration", c => c.PadRight(0));
        table.AddEmptyRow();

    // Colors
        table.AddRow(
            new Markup("[red]Colors[/]"),
            GetColorTable());

    // Styles
        table.AddEmptyRow();
        table.AddRow(
            new Markup("[red]OS[/]"),
            new Grid().Expand().AddColumns(3)
                .AddRow(
                    "[bold green]Windows[/]",
                    "[bold blue]macOS[/]",
                    "[bold yellow]Linux[/]"));

    // Styles
        table.AddEmptyRow();
        table.AddRow(
            "[red]Styles[/]",
            "All ansi styles: [bold]bold[/], [dim]dim[/], [italic]italic[/], [underline]underline[/], "
            + "[strikethrough]strikethrough[/], [reverse]reverse[/], and even [blink]blink[/].");

    // Text
        table.AddEmptyRow();
        table.AddRow(
            new Markup("[red]Text[/]"),
            new Markup("Word wrap text. Justify [green]left[/], [yellow]center[/] or [blue]right[/]."));

        table.AddEmptyRow();
        table.AddRow(
            Text.Empty,
            GetTextGrid());

    // Markup
        table.AddEmptyRow();
        table.AddRow(
            "[red]Markup[/]",
            "[bold purple]Spectre.Console[/] supports a simple [i]bbcode[/] like "
            + "[b]markup[/] for [yellow]color[/], [underline]style[/], and emoji! "
            + ":thumbs_up: :red_apple: :ant: :bear: :baguette_bread: :bus:");

    // Trees and tables
        table.AddEmptyRow();
        table.AddRow(
            new Markup("[red]Tables and Trees[/]"),
            GetTreeTable());

    // Charts
        table.AddRow(
            new Markup("[red]Charts[/]"),
            new Grid().Collapse().AddColumns(2).AddRow(
                new Panel(GetBreakdownChart()).BorderColor(Color.Grey),
                new Panel(GetBarChart()).BorderColor(Color.Grey)));


    // Exceptions
        table.AddEmptyRow();
        table.AddRow(
            new Markup("[red]Exceptions[/]"),
            ExceptionGenerator.GenerateException().GetRenderable());

    // Much more
        table.AddEmptyRow();
        table.AddRow(
            "[red]+ Much more![/]",
            "Tables, Grids, Trees, Progress bars, Status, Bar charts, Calendars, Figlet, Images, Text prompts, "
            + "List boxes, Separators, Pretty exceptions, Canvas, CLI parsing");
        table.AddEmptyRow();

        ansiConsole.Write(table);
    }

    private static IRenderable GetColorTable()
    {
        var colorTable = new Table().Collapse().HideHeaders().NoBorder();
        colorTable.AddColumn("Desc", c => c.PadRight(3)).AddColumn("Colors", c => c.PadRight(0));
        colorTable.AddRow(
            new Markup(
                "✓ [bold grey]NO_COLOR support[/]\n" +
                "✓ [bold green]3-bit color[/]\n" +
                "✓ [bold blue]4-bit color[/]\n" +
                "✓ [bold purple]8-bit color[/]\n" +
                "✓ [bold yellow]Truecolor (16.7 million)[/]\n" +
                "✓ [bold aqua]Automatic color conversion[/]"),
            new ColorBox(height: 6));

        return colorTable;
    }

    private static IRenderable GetTextGrid()
    {
        var loremTable = new Grid();
        var lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque in metus sed sapien ultricies pretium a at justo. Maecenas luctus velit et auctor maximus.";
        loremTable.AddColumn(new GridColumn().LeftAligned());
        loremTable.AddColumn(new GridColumn().Centered());
        loremTable.AddColumn(new GridColumn().RightAligned());
        loremTable.AddRow($"[green]{lorem}[/]", $"[yellow]{lorem}[/]", $"[blue]{lorem}[/]");
        return loremTable;
    }

    private static IRenderable GetTreeTable()
    {
        var tree = new Tree("📁 src");
        tree.AddNode("📁 foo").AddNode("📄 bar.cs");
        tree.AddNode("📁 baz").AddNode("📁 qux").AddNode("📄 corgi.txt");
        tree.AddNode("📄 waldo.xml");

        var table = new Table().SimpleBorder().BorderColor(Color.Grey);
        table.AddColumn(new TableColumn("Overview"));
        table.AddColumn(new TableColumn("").Footer("[grey]3 Files, 225 KiB[/]"));
        table.AddRow(new Markup("[yellow]Files[/]"), tree);

        return new Table().RoundedBorder().Collapse().BorderColor(Color.Yellow)
            .AddColumn("Foo").AddColumn("Bar")
            .AddRow(new Text("Baz"), table)
            .AddRow("Qux", "Corgi");
    }

    private static IRenderable GetBarChart()
    {
        return new BarChart()
            .AddItem("Apple", 32, Color.Green)
            .AddItem("Oranges", 13, Color.Orange1)
            .AddItem("Bananas", 22, Color.Yellow);
    }

    private static IRenderable GetBreakdownChart()
    {
        return new BreakdownChart()
            .ShowPercentage()
            .FullSize()
            .AddItem("C#", 82, Color.Green)
            .AddItem("PowerShell", 13, Color.Red)
            .AddItem("Bash", 5, Color.Blue);
    }

    public static class ExceptionGenerator
    {
        public static Exception GenerateException()
        {
            try
            {
                SomeOperation();
                throw new InvalidOperationException();
            }
            catch (Exception ex)
            {
                return ex;
            }
        }

        private static void SomeOperation()
        {
            SomeOperationGoingWrong();
        }

        private static void SomeOperationGoingWrong()
        {
            throw new InvalidOperationException("Something went very wrong!");
        }
    }

    public sealed class ColorBox : Renderable
    {
        private readonly int _height;
        private int? _width;

        public ColorBox(int height)
        {
            _height = height;
        }

        public ColorBox(int width, int height)
            : this(height)
        {
            _width = width;
        }

        protected override Measurement Measure(RenderContext context, int maxWidth)
        {
            return new Measurement(1, GetWidth(maxWidth));
        }

        protected override IEnumerable<Segment> Render(RenderContext context, int maxWidth)
        {
            maxWidth = GetWidth(maxWidth);

            for (var y = 0; y < _height; y++)
            {
                for (var x = 0; x < maxWidth; x++)
                {
                    var h = x / (float)maxWidth;
                    var l = 0.1f + ((y / (float)_height) * 0.7f);
                    var (r1, g1, b1) = ColorFromHSL(h, l, 1.0f);
                    var (r2, g2, b2) = ColorFromHSL(h, l + (0.7f / 10), 1.0f);

                    var background = new Color((byte)(r1 * 255), (byte)(g1 * 255), (byte)(b1 * 255));
                    var foreground = new Color((byte)(r2 * 255), (byte)(g2 * 255), (byte)(b2 * 255));

                    yield return new Segment("▄", new Style(foreground, background));
                }

                yield return Segment.LineBreak;
            }
        }

        private int GetWidth(int maxWidth)
        {
            var width = maxWidth;
            if (_width != null)
            {
                width = Math.Min(_width.Value, width);
            }

            return width;
        }

        private static (float, float, float) ColorFromHSL(double h, double l, double s)
        {
            double r = 0, g = 0, b = 0;
            if (l != 0)
            {
                if (s == 0)
                {
                    r = g = b = l;
                }
                else
                {
                    double temp2;
                    if (l < 0.5)
                    {
                        temp2 = l * (1.0 + s);
                    }
                    else
                    {
                        temp2 = l + s - (l * s);
                    }

                    var temp1 = 2.0 * l - temp2;

                    r = GetColorComponent(temp1, temp2, h + 1.0 / 3.0);
                    g = GetColorComponent(temp1, temp2, h);
                    b = GetColorComponent(temp1, temp2, h - 1.0 / 3.0);
                }
            }

            return ((float)r, (float)g, (float)b);
        }

        private static double GetColorComponent(double temp1, double temp2, double temp3)
        {
            if (temp3 < 0.0)
            {
                temp3 += 1.0;
            }
            else if (temp3 > 1.0)
            {
                temp3 -= 1.0;
            }

            if (temp3 < 1.0 / 6.0)
            {
                return temp1 + (temp2 - temp1) * 6.0 * temp3;
            }
            else if (temp3 < 0.5)
            {
                return temp2;
            }
            else if (temp3 < 2.0 / 3.0)
            {
                return temp1 + ((temp2 - temp1) * ((2.0 / 3.0) - temp3) * 6.0);
            }
            else
            {
                return temp1;
            }
        }
    }



}